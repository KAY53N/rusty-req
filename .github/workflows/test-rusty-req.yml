name: Test rusty-req installation on multiple platforms

on:
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to test'
        required: true
        default: '3.10'
        type: choice
        options:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
      platform:
        description: 'Platform to test'
        required: true
        default: 'ubuntu-latest'
        type: choice
        options:
          - 'ubuntu-latest'
          - 'windows-latest'
          - 'macos-latest'
          - 'all-platforms'

jobs:
  test-installation:
    runs-on: ${{ matrix.os || github.event.inputs.platform }}
    strategy:
      ${{ github.event.inputs.platform == 'all-platforms' && 'matrix' || '' }}:
        ${{ github.event.inputs.platform == 'all-platforms' && 'matrix' || '' }}:
          os: [ubuntu-latest, windows-latest, macos-latest]
          python-version: [${{ github.event.inputs.python-version }}]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version || github.event.inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version || github.event.inputs.python-version }}

      - name: Display platform info
        run: |
          echo "Running on: ${{ matrix.os || github.event.inputs.platform }}"
          echo "Python version: ${{ matrix.python-version || github.event.inputs.python-version }}"
          python --version
          python -c "import platform; print(f'Platform: {platform.platform()}')"

      - name: Install rusty-req
        run: |
          pip install --upgrade pip
          pip install rusty-req --no-cache-dir

      - name: Verify installation
        run: |
          python -c "
          try:
              import rusty_req
              print('✅ rusty-req imported successfully')
              print(f'Version: {rusty_req.__version__}')
          except ImportError as e:
              print(f'❌ Import failed: {e}')
              exit(1)
          except Exception as e:
              print(f'⚠️ Error: {e}')
              exit(1)
          "