name: 在多平台上测试 rusty-req 安装

on:
  workflow_dispatch:
    inputs:
      python-version:
        description: '要测试的 Python 版本'
        required: true
        default: '3.10'
        type: choice
        options:
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
      platform:
        description: '要测试的平台'
        required: true
        default: 'ubuntu-latest'
        type: choice
        options:
          - 'ubuntu-latest'
          - 'windows-latest'
          - 'macos-latest'
          - 'all-platforms'

jobs:
  # 多平台测试
  test-all:
    if: ${{ github.event.inputs.platform == 'all-platforms' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: 检出代码库
        uses: actions/checkout@v4

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 显示平台信息
        run: |
          echo "运行平台: ${{ matrix.os }}"
          echo "Python 版本: ${{ matrix.python-version }}"
          python --version
          python -c "import platform; print(f'平台详情: {platform.platform()}')"

      - name: 安装 rusty-req
        run: |
          pip install --upgrade pip
          pip install rusty-req --no-cache-dir

      - name: 验证安装
        run: |
          python -c "
          try:
              import rusty_req
              print('✅ rusty-req 导入成功')
              # 尝试获取版本信息，如果不存在也不报错
              if hasattr(rusty_req, '__version__'):
                  print(f'版本: {rusty_req.__version__}')
              else:
                  print('ℹ️  模块没有 __version__ 属性')
                  # 检查其他属性来确认模块功能正常
                  print(f'模块内容: {dir(rusty_req)}')
          except ImportError as e:
              print(f'❌ 导入失败: {e}')
              exit(1)
          except Exception as e:
              print(f'⚠️  其他错误: {e}')
              exit(1)
          "

  # 单平台测试
  test-single:
    if: ${{ github.event.inputs.platform != 'all-platforms' }}
    runs-on: ${{ github.event.inputs.platform }}

    steps:
      - name: 检出代码库
        uses: actions/checkout@v4

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python-version }}

      - name: 显示平台信息
        run: |
          echo "运行平台: ${{ github.event.inputs.platform }}"
          echo "Python 版本: ${{ github.event.inputs.python-version }}"
          python --version
          python -c "import platform; print(f'平台详情: {platform.platform()}')"

      - name: 安装 rusty-req
        run: |
          pip install --upgrade pip
          pip install rusty-req --no-cache-dir

      - name: 验证安装
        run: |
          python -c "
          try:
              import rusty_req
              print('✅ rusty-req 导入成功')
              # 尝试获取版本信息，如果不存在也不报错
              if hasattr(rusty_req, '__version__'):
                  print(f'版本: {rusty_req.__version__}')
              else:
                  print('ℹ️  模块没有 __version__ 属性')
                  # 检查模块是否包含预期的方法
                  print('模块已成功加载，但缺少版本属性')
          except ImportError as e:
              print(f'❌ 导入失败: {e}')
              exit(1)
          except Exception as e:
              print(f'⚠️  其他错误: {e}')
              exit(1)
          "
