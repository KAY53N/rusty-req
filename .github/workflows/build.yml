name: Build and Publish Rust Python Extension

on:
  push:
    tags:
      - 'v*'   # 例如 v0.1.0、v1.2.3 等

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
    steps:
      - uses: actions/checkout@v4
      - name: Install system dependencies
        run: dnf install -y openssl-devel pkgconfig
      - name: Install Rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
      - name: Build Wheel
        shell: bash
        run: |
          source $HOME/.cargo/env
          PYTHON_TAG="cp${ {matrix.python-version}/./}-cp${ {matrix.python-version}/./}"
          PYTHON_BIN=$(find /opt/python/${PYTHON_TAG}*/bin -type d | head -1)
          ${PYTHON_BIN}/pip install maturin==1.9.2
          ${PYTHON_BIN}/maturin build --release --manylinux 2_28 --interpreter ${PYTHON_BIN}/python
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-py${{ matrix.python-version }}
          path: target/wheels/*.whl

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Add targets
        run: rustup target add x86_64-apple-darwin aarch64-apple-darwin
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install tools
        run: pip install maturin==1.9.2 delocate
      - name: Build universal wheel
        run: |
          mkdir -p target/wheels
          maturin build --release --universal2 --interpreter python
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-py${{ matrix.python-version }}
          path: target/wheels/*.whl

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Clean workspace # 这个步骤可以保留，用于清理旧的构建产物
        run: Remove-Item -Recurse -Force target,dist -ErrorAction SilentlyContinue
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install maturin
        run: pip install maturin==1.9.2

      - name: Build wheel
        run: |
          $env:RUSTFLAGS="-C target-feature=+crt-static"
          maturin build --release --interpreter python --out target/wheels

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-py${{ matrix.python-version }}
          path: target/wheels/*.whl

  publish:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true
      - name: Prepare final distribution
        run: |
          mkdir -p final_dist
          find dist -name "*.whl" -exec cp {} final_dist/ \;
      - name: Validate wheels
        run: |
          pip install twine wheel
          for whl in final_dist/*.whl; do
            python -m wheel unpack "$whl" --dest test_unpack || exit 1
            rm -rf test_unpack
          done
          twine check final_dist/*.whl
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          packages-dir: final_dist