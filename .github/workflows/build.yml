name: Build and Publish Rust Python Extension

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Ubuntu 多版本
          - os: ubuntu-latest
            python-version: '3.9'
          - os: ubuntu-latest
            python-version: '3.10'
          - os: ubuntu-latest
            python-version: '3.11'
          - os: ubuntu-latest
            python-version: '3.12'
          - os: ubuntu-latest
            python-version: '3.13'
          # Windows 多版本
          - os: windows-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.10'
          - os: windows-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.12'
          - os: windows-latest
            python-version: '3.13'
          # macOS 多版本
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.10'
          - os: macos-latest
            python-version: '3.11'
          - os: macos-latest
            python-version: '3.12'
          - os: macos-latest
            python-version: '3.13'

    steps:
      - uses: actions/checkout@v4

      # Rust
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Set up additional Rust targets for macOS
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      # 系统依赖
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl pkg-config || true
          echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          choco install openssl.light pkgconfiglite -y
          echo "OPENSSL_DIR=C:\Program Files\OpenSSL-Win64" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_PATH=C:\Program Files\OpenSSL-Win64\lib\pkgconfig" >> $env:GITHUB_ENV

      # Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install cibuildwheel==2.16.2 maturin==1.9.2

      # 编译 wheel
      - name: Build wheels with cibuildwheel
        shell: bash
        run: |
          # 对 Linux 主机（manylinux 容器）安装必要依赖
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y pkg-config libssl-dev
          fi
          
          # 执行 cibuildwheel
          cibuildwheel --output-dir wheelhouse . 2>&1 | tee build.log
          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          
          echo "=== Build completed with exit code: $BUILD_EXIT_CODE ==="
          cat build.log
          
          if [ -d wheelhouse ] && [ "$(ls -1 wheelhouse/*.whl 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "✅ Wheels generated successfully"
            exit 0
          else
            echo "❌ No wheels generated or build failed"
            exit $BUILD_EXIT_CODE
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_SKIP: "*-musllinux_* pp*"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux_2_28"
          # 给容器传 OpenSSL 路径
          CIBW_ENVIRONMENT: |
            OPENSSL_DIR=/usr
            PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig
            MACOSX_DEPLOYMENT_TARGET=10.12
          CIBW_BUILD_COMMAND: "maturin build --release --interpreter python"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "python -m auditwheel repair -w {dest_dir} {wheel}"

      # 验证 wheels
      - name: Verify wheels
        run: |
          python -m pip install twine
          if [ -d wheelhouse ] && [ "$(ls -1 wheelhouse/*.whl 2>/dev/null | wc -l)" -gt 0 ]; then
            python -m twine check wheelhouse/*.whl
          else
            echo "No wheels to verify"

      # 上传 artifact
      - name: Upload wheels as artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  # 发布到 PyPI
  publish:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload --skip-existing dist/*.whl --verbose

  # 创建 GitHub Release
  release:
    needs: publish
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Download all wheels for release
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.whl
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
