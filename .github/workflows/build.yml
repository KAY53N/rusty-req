name: Build and Publish Rust Python Extension

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: "要发布的版本号 (例如 v0.1.0)"
        required: false
        default: ""

jobs:
  build-and-publish:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.9"
            manylinux: 2_28
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: "3.10"
            manylinux: 2_28
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: "3.11"
            manylinux: 2_28
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: "3.12"
            manylinux: 2_28
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            python-version: "3.9"
            target: x86_64-apple-darwin
          - os: macos-latest
            python-version: "3.10"
            target: x86_64-apple-darwin
          - os: macos-latest
            python-version: "3.11"
            target: x86_64-apple-darwin
          - os: macos-latest
            python-version: "3.12"
            target: x86_64-apple-darwin
          - os: macos-latest
            python-version: "3.9"
            target: aarch64-apple-darwin
          - os: macos-latest
            python-version: "3.10"
            target: aarch64-apple-darwin
          - os: macos-latest
            python-version: "3.11"
            target: aarch64-apple-darwin
          - os: macos-latest
            python-version: "3.12"
            target: aarch64-apple-darwin
          - os: windows-latest
            python-version: "3.9"
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            python-version: "3.10"
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            python-version: "3.11"
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            python-version: "3.12"
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install maturin
        run: pip install maturin

      - name: Build wheel (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ "$RUNNER_OS" = "Linux" ]; then
            maturin build --release --manylinux ${{ matrix.manylinux }} --interpreter python --out dist
          else
            maturin build --release --target ${{ matrix.target }} --interpreter python --out dist
          fi

      - name: Build wheel (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          maturin build --release --target ${{ matrix.target }} --interpreter python --out dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.target }}
          path: dist/*.whl

  publish:
    needs: build-and-publish
    runs-on: ubuntu-latest
    if: success() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'release')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheel-*
          merge-multiple: true

      - name: List downloaded wheels
        run: find dist -name "*.whl" | xargs ls -la

      - name: Publish to PyPI
        uses: messense/maturin-action@v1
        with:
          maturin-version: latest
          command: publish
          args: --no-sdist --skip-existing
        env:
          MATURIN_PASSWORD: ${{ secrets.PYPI_TOKEN }}
