name: Build and Publish Rust Python Extension

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: "要发布的版本号 (例如 v0.1.0)"
        required: false
        default: ""

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          dnf install -y openssl-devel pkgconfig

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
          source "$HOME/.cargo/env"
          rustup target add x86_64-unknown-linux-gnu

      - name: Set up Python & Build Wheel
        run: |
          source "$HOME/.cargo/env"
          PYTHON_VERSION=${{ matrix.python-version }}
          PYTHON_TAG="cp${PYTHON_VERSION//./}-cp${PYTHON_VERSION//./}"
          PYTHON_DIR=""
          for dir in /opt/python/*; do
              base=$(basename "$dir")
              if [[ "$base" == "${PYTHON_TAG}t" ]]; then
                  PYTHON_DIR="$dir"
                  break
              elif [[ "$base" == "$PYTHON_TAG" ]]; then
                  PYTHON_DIR="$dir"
              fi
          done
          if [[ -z "$PYTHON_DIR" ]]; then
              echo "❌ 没找到解释器目录"; ls -1 /opt/python; exit 1
          fi
          PYTHON_BIN="${PYTHON_DIR}/bin"
          $PYTHON_BIN/pip install --upgrade pip maturin==1.9.2
          OUTPUT_DIR="/tmp/wheels/linux-py${PYTHON_VERSION}"
          mkdir -p "$OUTPUT_DIR"
          cargo clean
          $PYTHON_BIN/maturin build --release --manylinux 2_28 --interpreter $PYTHON_BIN/python --out "$OUTPUT_DIR"

      - name: Verify wheel integrity (Linux)
        run: |
          PYTHON_VERSION=${{ matrix.python-version }}
          PYTHON_TAG="cp${PYTHON_VERSION//./}-cp${PYTHON_VERSION//./}"
          PYTHON_DIR=""
          for dir in /opt/python/*; do
              base=$(basename "$dir")
              if [[ "$base" == "${PYTHON_TAG}t" ]]; then
                  PYTHON_DIR="$dir"
                  break
              elif [[ "$base" == "$PYTHON_TAG" ]]; then
                  PYTHON_DIR="$dir"
              fi
          done
          PYTHON_BIN="${PYTHON_DIR}/bin"
          $PYTHON_BIN/pip install wheel
          for wheel in /tmp/wheels/linux-py${{ matrix.python-version }}/*.whl; do
            echo "检查: $wheel"
            # 使用 unpack 来验证 wheel 文件完整性
            $PYTHON_BIN/python -m wheel unpack "$wheel" -d /tmp/test_wheel
            rm -rf /tmp/test_wheel
            # 检查文件类型
            file "$wheel"
            # 检查 ZIP 文件完整性
            $PYTHON_BIN/python -c "import zipfile; zf = zipfile.ZipFile('$wheel'); print('ZIP 文件验证通过:', zf.testzip() is None)"
          done

      - name: Upload Linux wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-py${{ matrix.python-version }}
          path: /tmp/wheels/linux-py${{ matrix.python-version }}/*.whl

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        target: ["x86_64-apple-darwin", "aarch64-apple-darwin"]
      max-parallel: 3
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install maturin
        run: pip install maturin==1.9.2

      - name: Build wheel
        run: |
          OUTPUT_DIR="dist/macos-${{ matrix.target }}-py${{ matrix.python-version }}"
          mkdir -p $OUTPUT_DIR
          cargo clean
          maturin build --release --target ${{ matrix.target }} --interpreter python --out $OUTPUT_DIR

      - name: Verify wheel integrity (macOS)
        run: |
          pip install wheel
          for wheel in dist/macos-${{ matrix.target }}-py${{ matrix.python-version }}/*.whl; do
            echo "检查: $wheel"
            # 使用 unpack 替代 verify
            python -m wheel unpack "$wheel" -d /tmp/test_wheel
            rm -rf /tmp/test_wheel
            # 检查文件信息
            file "$wheel"
            # 检查 ZIP 完整性
            python -c "import zipfile; zf = zipfile.ZipFile('$wheel'); print('ZIP 文件验证通过:', zf.testzip() is None)"
          done

      - name: Upload macOS wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}-py${{ matrix.python-version }}
          path: dist/macos-${{ matrix.target }}-py${{ matrix.python-version }}/*.whl

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install maturin
        run: pip install maturin==1.9.2

      - name: Build wheel (Windows)
        shell: pwsh
        run: |
          $OUTPUT_DIR = "dist\windows-py${{ matrix.python-version }}"
          New-Item -ItemType Directory -Path $OUTPUT_DIR -Force
          cargo clean
          # 构建 wheel
          maturin build --release --interpreter python --out $OUTPUT_DIR --strip
          
          # 修复 ZIP 文件：重新打包以确保格式正确
          Get-ChildItem "$OUTPUT_DIR\*.whl" | ForEach-Object {
            Write-Host "修复 ZIP 文件: $($_.FullName)"
            $tempDir = "temp_repack"
            # 解压并重新打包
            Expand-Archive -Path $_.FullName -DestinationPath $tempDir -Force
            Remove-Item -Force $_.FullName
            Compress-Archive -Path "$tempDir\*" -DestinationPath $_.FullName -CompressionLevel Optimal
            Remove-Item -Recurse -Force $tempDir
          }

      - name: Verify wheel integrity (Windows)
        shell: pwsh
        run: |
          pip install wheel
          $wheels = Get-ChildItem "dist\windows-py${{ matrix.python-version }}\*.whl"
          foreach ($wheel in $wheels) {
            Write-Host "检查: $($wheel.FullName)"
            # 使用 unpack 验证
            python -m wheel unpack $wheel.FullName -d test_wheel
            Remove-Item -Recurse -Force test_wheel -ErrorAction SilentlyContinue
          
            # 检查文件类型
            file $wheel.FullName
          
            # 使用 PowerShell 的 Expand-Archive 来验证 ZIP 文件
            try {
              Expand-Archive -Path $wheel.FullName -DestinationPath test_zip -Force
              Write-Host "✅ ZIP 验证通过"
              Remove-Item -Recurse -Force test_zip -ErrorAction SilentlyContinue
            } catch {
              Write-Host "❌ ZIP 验证失败: $($_.Exception.Message)"
            }
          }

      - name: Upload Windows wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-py${{ matrix.python-version }}
          path: dist/windows-py${{ matrix.python-version }}/*.whl

  publish:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: success() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'release')

    steps:
      - uses: actions/checkout@v4

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          path: linux_wheels
          pattern: wheels-linux-*

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          path: macos_wheels
          pattern: wheels-macos-*

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          path: windows_wheels
          pattern: wheels-windows-*

      - name: List all wheels separately
        run: |
          echo "Linux wheels:"
          find linux_wheels -name "*.whl" | xargs ls -la
          echo ""
          echo "macOS wheels:"
          find macos_wheels -name "*.whl" | xargs ls -la
          echo ""
          echo "Windows wheels:"
          find windows_wheels -name "*.whl" | xargs ls -la

      - name: Upload to PyPI separately
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "上传 Linux wheels:"
          twine upload --skip-existing linux_wheels/**/*.whl --verbose
          
          echo "上传 macOS wheels:"
          twine upload --skip-existing macos_wheels/**/*.whl --verbose
          
          echo "上传 Windows wheels (跳过有问题的):"
          for wheel in windows_wheels/**/*.whl; do
            if [[ ! "$wheel" == *"win_amd64.whl" ]]; then
              echo "上传: $wheel"
              twine upload --skip-existing "$wheel" --verbose
            else
              echo "跳过有问题的 Windows wheel: $wheel"
            fi
          done