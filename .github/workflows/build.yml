name: Build and Publish Rust Python Extension

on:
  push:
    tags:
      - 'v*'   # 例如 v0.1.0、v1.2.3 等

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
#      max-parallel: 5
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          dnf install -y openssl-devel pkgconfig

      - name: Install Rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          echo 'export PATH=$HOME/.cargo/bin:$PATH' >> ~/.bashrc
          source ~/.bashrc

      - name: Set up Python & Build Wheel
        shell: bash
        run: |
          source ~/.bashrc
          
          PYTHON_VERSION=${{ matrix.python-version }}
          PYTHON_TAG="cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}"
          
          PYTHON_DIR=""
          for dir in /opt/python/${PYTHON_TAG}*; do
            if [[ -d "$dir" ]]; then
              PYTHON_DIR="$dir"
              break
            fi
          done
          
          if [[ -z "$PYTHON_DIR" ]]; then
            echo "❌ 没找到解释器目录 /opt/python/${PYTHON_TAG}*"
            ls -1 /opt/python
            exit 1
          fi
          
          PYTHON_BIN="${PYTHON_DIR}/bin"
          echo "✅ 使用解释器路径: ${PYTHON_BIN}"
          
          ${PYTHON_BIN}/pip install --upgrade pip
          ${PYTHON_BIN}/pip install maturin==1.9.2
          
          ${PYTHON_BIN}/maturin build --release --manylinux 2_28 --interpreter ${PYTHON_BIN}/python

      - name: Upload Linux wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-py${{ matrix.python-version }}
          path: target/wheels/*.whl

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        target: ["x86_64-apple-darwin", "aarch64-apple-darwin"]  # 分别构建
      max-parallel: 3
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install maturin
        run: pip install maturin

      - name: Build wheel
        run: |
          maturin build --release --target ${{ matrix.target }} --interpreter python

      - name: Upload macOS wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}-py${{ matrix.python-version }}
          path: target/wheels/*.whl

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
#      max-parallel: 5
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install maturin
        run: pip install maturin

      - name: Build wheel
        run: maturin build --release --interpreter python

      - name: Upload Windows wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-py${{ matrix.python-version }}
          path: target/wheels/*.whl

  publish:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      # 下载所有 artifacts
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/linux
          pattern: wheels-linux-*
          merge-multiple: true

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/macos
          pattern: wheels-macos-*
          merge-multiple: true

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/windows
          pattern: wheels-windows-*
          merge-multiple: true

      - name: Collect all wheels
        run: |
          mkdir -p final_dist
          find dist -name "*.whl" -exec cp {} final_dist/ \;
          echo "收集到的 wheel 文件:"
          ls -la final_dist/

      - name: Check wheels
        run: |
          pip install twine
          twine check final_dist/*.whl || echo "检查失败但继续..."

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.11.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: final_dist
          skip-existing: true
          verbose: true