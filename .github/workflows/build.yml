name: Build and Publish Rust Python Extension

on:
  push:
    tags:
      - 'v*'   # 例如 v0.1.0、v1.2.3 等

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.targets }}

      - name: Set up additional Rust targets for macOS
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Build wheels using cibuildwheel
        uses: pypa/cibuildwheel@v2.16.2
        env:
          # 构建 Python 3.9 到 3.13 的 wheel
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"

          # 跳过一些不需要的构建
          CIBW_SKIP: "*-musllinux_* pp*"  # 跳过 musl 和 PyPy

          # macOS: 构建 universal2 wheel (包含 x86_64 和 arm64)
          CIBW_ARCHS_MACOS: "x86_64 arm64 universal2"

          # Linux: 使用 manylinux_2_28
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux_2_28"

          # Windows: 64位
          CIBW_ARCHS_WINDOWS: "AMD64"

          # 安装构建依赖
          CIBW_BEFORE_BUILD: |
            pip install --upgrade pip setuptools wheel
            pip install maturin==1.9.2

          # Linux 特殊设置：安装系统依赖
          CIBW_BEFORE_BUILD_LINUX: |
            dnf install -y openssl-devel pkgconfig || yum install -y openssl-devel pkgconfig || apt-get update && apt-get install -y pkg-config libssl-dev
            pip install --upgrade pip setuptools wheel
            pip install maturin==1.9.2

          # 构建命令
          CIBW_BUILD_COMMAND: "maturin build --release --interpreter python"

          # macOS 特殊处理：设置目标架构
          CIBW_ENVIRONMENT_MACOS: >
            CARGO_BUILD_TARGET="$( [[ $(uname -m) == 'arm64' ]] && echo 'aarch64-apple-darwin' || echo 'x86_64-apple-darwin' )"
            MACOSX_DEPLOYMENT_TARGET="10.12"

          # 测试构建的 wheel
          CIBW_TEST_COMMAND: |
            python -c "
            import sys
            print(f'Python version: {sys.version}')
            try:
                import {你的模块名}  # 替换为你的实际模块名
                print('✅ 模块导入成功')
            except ImportError as e:
                print(f'❌ 模块导入失败: {e}')
                sys.exit(1)
            "

          # 修复权限问题 (Linux)
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"

          # Windows 特殊设置
          CIBW_BEFORE_BUILD_WINDOWS: |
            pip install --upgrade pip setuptools wheel
            pip install maturin==1.9.2

      - name: Verify wheels
        run: |
          python -m pip install twine
          python -m twine check wheelhouse/*.whl

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  publish:
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true

      - name: Collect and validate wheels
        run: |
          echo "=== 收集的 wheel 文件 ==="
          ls -la dist/
          
          echo "=== 验证所有 wheel 文件 ==="
          python -m pip install twine
          
          for whl in dist/*.whl; do
            echo "🔍 验证: $(basename $whl)"
          
            # 检查文件大小
            size=$(stat -c%s "$whl" 2>/dev/null || stat -f%z "$whl" 2>/dev/null)
            echo "文件大小: $size bytes"
          
            if [ "$size" -eq 0 ]; then
              echo "❌ 文件大小为 0，跳过"
              rm "$whl"
              continue
            fi
          
            # 使用 twine 验证
            if python -m twine check "$whl"; then
              echo "✅ $(basename $whl) 验证通过"
            else
              echo "❌ $(basename $whl) 验证失败，删除"
              rm "$whl"
            fi
            echo "---"
          done
          
          # 检查是否还有有效文件
          remaining_files=$(ls dist/*.whl 2>/dev/null | wc -l)
          if [ "$remaining_files" -eq 0 ]; then
            echo "❌ 没有有效的 wheel 文件"
            exit 1
          fi
          
          echo "=== 准备上传的文件 ==="
          ls -la dist/

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload --skip-existing dist/*.whl --verbose

      # 可选：上传到 TestPyPI 进行测试
      # - name: Upload to TestPyPI
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      #   run: |
      #     python -m twine upload --repository testpypi --skip-existing dist/*.whl --verbose

  # 可选：创建 GitHub Release
  release:
    needs: [publish]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false