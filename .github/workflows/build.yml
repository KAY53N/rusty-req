name: Build and Publish Rust Python Extension

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: "要发布的版本号 (例如 v0.1.0)"
        required: false
        default: ""

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          dnf install -y openssl-devel pkgconfig

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Set up Python & Build Wheel
        shell: bash
        run: |
          PYTHON_VERSION=${{ matrix.python-version }}
          PYTHON_TAG="cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}"

          PYTHON_DIR=$(find /opt/python -maxdepth 1 -type d -name "${PYTHON_TAG}*")
          if [[ -z "$PYTHON_DIR" ]]; then
            echo "❌ 没找到解释器目录 /opt/python/${PYTHON_TAG}*"
            ls -1 /opt/python
            exit 1
          fi
          PYTHON_BIN="${PYTHON_DIR}/bin"
          echo "✅ 使用解释器路径: ${PYTHON_BIN}"

          ${PYTHON_BIN}/pip install --upgrade pip
          ${PYTHON_BIN}/pip install maturin==1.9.2 twine

          OUTPUT_DIR="/tmp/wheels/linux-py${PYTHON_VERSION}"
          mkdir -p $OUTPUT_DIR

          cargo clean
          ${PYTHON_BIN}/maturin build \
            --release \
            --manylinux 2_28 \
            --interpreter ${PYTHON_BIN}/python \
            --out $OUTPUT_DIR

      - name: Verify wheel integrity
        shell: bash
        run: |
          PYTHON_VERSION=${{ matrix.python-version }}
          PYTHON_TAG="cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}"

          PYTHON_DIR=$(find /opt/python -name "${PYTHON_TAG}*" -type d | head -1)
          PYTHON_BIN="${PYTHON_DIR}/bin"

          OUTPUT_DIR="/tmp/wheels/linux-py${PYTHON_VERSION}"

          ${PYTHON_BIN}/python -m twine check $OUTPUT_DIR/*.whl

      - name: Upload Linux wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-py${{ matrix.python-version }}
          path: /tmp/wheels/linux-py${{ matrix.python-version }}/*.whl

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        target: ["x86_64-apple-darwin", "aarch64-apple-darwin"]
      max-parallel: 3
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install maturin and twine
        run: pip install maturin twine

      - name: Build wheel
        run: |
          # 为每个配置创建独立输出目录
          OUTPUT_DIR="dist/macos-${{ matrix.target }}-py${{ matrix.python-version }}"
          mkdir -p $OUTPUT_DIR
          
          # 清理并构建
          cargo clean
          maturin build --release --target ${{ matrix.target }} --interpreter python --out $OUTPUT_DIR

      - name: Verify wheel integrity
        run: |
          OUTPUT_DIR="dist/macos-${{ matrix.target }}-py${{ matrix.python-version }}"
          twine check $OUTPUT_DIR/*.whl

      - name: Upload macOS wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}-py${{ matrix.python-version }}
          path: dist/macos-${{ matrix.target }}-py${{ matrix.python-version }}/*.whl

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install maturin and twine
        run: pip install maturin twine

      - name: Build wheel
        run: |
          $OUTPUT_DIR = "dist\windows-py${{ matrix.python-version }}"
          New-Item -ItemType Directory -Path $OUTPUT_DIR -Force
          cargo clean
          maturin build --release --interpreter python --out $OUTPUT_DIR

      - name: Verify wheel integrity
        run: |
          twine check dist/windows-py${{ matrix.python-version }}/*.whl

      - name: Upload Windows wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-py${{ matrix.python-version }}
          path: dist/windows-py${{ matrix.python-version }}/*.whl

  publish:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      # 下载所有 artifacts
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/linux
          pattern: wheels-linux-*
          merge-multiple: true

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/macos
          pattern: wheels-macos-*
          merge-multiple: true

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/windows
          pattern: wheels-windows-*
          merge-multiple: true

      - name: Collect all wheels
        run: |
          mkdir -p final_dist
          find artifacts -name "*.whl" -exec cp {} final_dist/ \;
          echo "=== 最终文件 ==="
          ls -la final_dist/

      - name: Install twine
        run: pip install twine

      - name: Verify wheels with twine
        run: |
          echo "=== 详细检查每个 wheel ==="
          for whl in final_dist/*.whl; do
            echo "检查: $whl"
            if twine check "$whl"; then
              echo "✅ 通过"
            else
              echo "❌ 失败，尝试修复..."
              # 尝试修复 trailing data
              temp_dir=$(mktemp -d)
              if unzip -q "$whl" -d "$temp_dir" 2>/dev/null; then
                cd "$temp_dir"
                zip -q -r "../fixed.whl" .
                cd -
                mv "$temp_dir/../fixed.whl" "$whl"
                rm -rf "$temp_dir"
                echo "✅ 修复完成"
              else
                echo "❌ 修复失败"
              fi
            fi
            echo "---"
          done

      - name: Final verification
        run: |
          echo "=== 最终验证 ==="
          twine check final_dist/*.whl
          echo "✅ 所有文件验证通过"

      - name: Upload to PyPI using twine
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          # 使用 twine 上传，跳过已存在的版本
          twine upload --skip-existing final_dist/*.whl --verbose
