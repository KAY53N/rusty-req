name: Build and Publish Rust Python Extension

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            python-version: '3.11'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Set up additional Rust targets for macOS
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config openssl || true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version || '3.11' }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install cibuildwheel==2.16.2 maturin==1.9.2

      - name: Build wheels with cibuildwheel
        run: |
          set -x
          cibuildwheel --output-dir wheelhouse . 2>&1 | tee build.log
          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          
          echo "=== Build completed with exit code: $BUILD_EXIT_CODE ==="
          echo "=== Build log contents ==="
          cat build.log
          
          if [ -d wheelhouse ] && [ "$(ls -1 wheelhouse/*.whl 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "✅ Wheels generated successfully"
            exit 0
          else
            echo "❌ No wheels generated"
            exit $BUILD_EXIT_CODE
          fi
        env:
          CIBW_BUILD: ${{ matrix.os == 'windows-latest' && 'cp311-*' || 'cp39-* cp310-* cp311-* cp312-* cp313-*' }}
          CIBW_SKIP: "*-musllinux_* pp* *-win32"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux_2_28"
          CIBW_ARCHS_WINDOWS: "AMD64"
          # 设置 OpenSSL 环境变量
          CIBW_ENVIRONMENT_LINUX: |
            OPENSSL_DIR=/usr
            OPENSSL_INCLUDE_DIR=/usr/include
            OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu
          CIBW_ENVIRONMENT_MACOS: |
            OPENSSL_DIR=$(brew --prefix openssl)
            OPENSSL_INCLUDE_DIR=$(brew --prefix openssl)/include
            OPENSSL_LIB_DIR=$(brew --prefix openssl)/lib
          CIBW_BEFORE_BUILD: "python -m pip install setuptools wheel maturin==1.9.2"
          CIBW_BEFORE_BUILD_LINUX: |
            sudo apt-get update
            sudo apt-get install -y pkg-config libssl-dev
            python -m pip install setuptools wheel maturin==1.9.2
          CIBW_BEFORE_BUILD_WINDOWS: "python -m pip install setuptools wheel maturin==1.9.2"
          CIBW_BEFORE_BUILD_MACOS: |
            brew install pkg-config openssl || true
            python -m pip install setuptools wheel maturin==1.9.2
          CIBW_ENVIRONMENT_MACOS: "MACOSX_DEPLOYMENT_TARGET=10.12"
          CIBW_BUILD_COMMAND: "maturin build --release --interpreter python"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"
          # Windows 优化配置
          CIBW_ENVIRONMENT_WINDOWS: |
            CIBW_VIRTUALENV_SYMLINKS=0
            CIBW_TEST_SKIP=*

      - name: Verify wheels
        run: |
          python -m pip install twine
          if [ -d wheelhouse ] && [ "$(ls -1 wheelhouse/*.whl 2>/dev/null | wc -l)" -gt 0 ]; then
            python -m twine check wheelhouse/*.whl
          else
            echo "No wheels to verify"
          fi

      - name: Upload wheels as artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  publish:
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    timeout-minutes: 15

    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true

      - name: Collect and validate wheels
        run: |
          echo "=== 收集的 wheel 文件 ==="
          find dist -name "*.whl" -exec ls -la {} \;
          
          echo "=== 验证所有 wheel 文件 ==="
          python -m pip install twine
          
          mkdir -p dist_final
          find dist -name "*.whl" -exec cp {} dist_final/ \;
          
          for whl in dist_final/*.whl; do
            echo "🔍 验证: $(basename $whl)"
          
            size=$(stat -c%s "$whl" 2>/dev/null || stat -f%z "$whl" 2>/dev/null)
            echo "文件大小: $size bytes"
          
            if [ "$size" -eq 0 ]; then
              echo "❌ 文件大小为 0，跳过"
              rm "$whl"
              continue
            fi
          
            python3 -c "
  import zipfile
  import sys
try:
  with zipfile.ZipFile('$whl', 'r') as zf:
    bad_files = zf.testzip()
    if bad_files:
      print('❌ ZIP 损坏:', bad_files)
      sys.exit(1)

    files = zf.namelist()
    has_metadata = any('METADATA' in f for f in files)
    has_wheel = any('WHEEL' in f for f in files)

    if not (has_metadata and has_wheel):
      print('❌ 缺少必要的元数据文件')
      sys.exit(1)

    print('✅ ZIP 结构正常')

except zipfile.BadZipFile as e:
  print('❌ ZIP 文件损坏:', e)
  sys.exit(1)
except Exception as e:
  print('❌ 验证失败:', e)
  sys.exit(1)
  " || { echo "❌ $(basename $whl) ZIP 验证失败，删除"; rm "$whl"; continue; }
  
  if python -m twine check "$whl"; then
  echo "✅ $(basename $whl) 验证通过"
  else
  echo "❌ $(basename $whl) 验证失败，删除"
  rm "$whl"
  fi
  echo "---"
  done
  
  remaining_files=$(ls dist_final/*.whl 2>/dev/null | wc -l)
  if [ "$remaining_files" -eq 0 ]; then
  echo "❌ 没有有效的 wheel 文件"
  exit 1
  fi
  
  echo "=== 准备上传的文件 ==="
  ls -la dist_final/

- name: Upload to PyPI
  env:
    TWINE_USERNAME: __token__
    TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
  run: |
    python -m twine upload --skip-existing dist_final/*.whl --verbose

release:
  needs: [publish]
  runs-on: ubuntu-latest
  if: startsWith(github.ref, 'refs/tags/')
  timeout-minutes: 10

  steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Download all wheels for release
      uses: actions/download-artifact@v4
      with:
        path: release_dist
        pattern: wheels-*
        merge-multiple: true

    - name: Prepare release assets
      run: |
        mkdir -p release_assets
        find release_dist -name "*.whl" -exec cp {} release_assets/ \;
        echo "=== 发布文件 ==="
        ls -la release_assets/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release_assets/*.whl
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}