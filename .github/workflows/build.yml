name: Build and Publish Rust Python Extension

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            python-version: '3.11' # For Windows, explicitly use 3.11 as a base, but cibuildwheel will build for more.

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Set up additional Rust targets for macOS
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config openssl || true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version || '3.11' }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install cibuildwheel==2.16.2 maturin==1.9.2

      - name: Build wheels with cibuildwheel
        shell: bash
        run: |
          # 构建 wheel
          cibuildwheel --output-dir wheelhouse . 2>&1 | tee build.log
          BUILD_EXIT_CODE=${PIPESTATUS[0]} # 捕获 cibuildwheel 的退出码
          
          echo "=== Build completed with exit code: $BUILD_EXIT_CODE ==="
          echo "=== Build log contents ==="
          cat build.log
          
          # 检查 wheel 是否生成
          if [ -d wheelhouse ] && [ "$(ls -1 wheelhouse/*.whl 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "✅ Wheels generated successfully"
            exit 0
          else
            echo "❌ No wheels generated or build failed"
            exit $BUILD_EXIT_CODE
          fi
        env:
          # 定义要构建的 Python 版本
          CIBW_BUILD: ${{ matrix.os == 'windows-latest' && 'cp39-* cp310-* cp311-* cp312-* cp313-*' || 'cp39-* cp310-* cp311-* cp312-* cp313-*' }}
          # 跳过特定平台或架构
          CIBW_SKIP: "*-musllinux_* pp* *-win32"
          # 指定架构
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_ARCHS_WINDOWS: "AMD64"
          # manylinux 镜像
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux_2_28"
          # macOS 部署目标
          CIBW_ENVIRONMENT: "MACOSX_DEPLOYMENT_TARGET=10.12"
          # 构建命令
          CIBW_BUILD_COMMAND: "maturin build --release --interpreter python"
          # Linux 修复 wheel
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "python -m auditwheel repair -w {dest_dir} {wheel}"
          # 不需要额外的 CIBW_BEFORE_BUILD
          CIBW_BEFORE_BUILD: ""

      - name: Verify wheels
        run: |
          python -m pip install twine
          if [ -d wheelhouse ] && [ "$(ls -1 wheelhouse/*.whl 2>/dev/null | wc -l)" -gt 0 ]; then
            python -m twine check wheelhouse/*.whl
          else
            echo "No wheels to verify"
          fi

      - name: Upload wheels as artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  publish:
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    timeout-minutes: 15

    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist # Download artifacts directly into 'dist'
          pattern: wheels-*
          merge-multiple: true

      - name: Collect and validate wheels
        run: |
          echo "=== 收集到的 wheel 文件 ==="
          find dist -name "*.whl" -exec ls -la {} \;
          
          echo "=== 验证所有 wheel 文件 ==="
          python -m pip install twine
          
          VALID_WHEELS_EXIST=false
          for whl in dist/*.whl; do
            if [ ! -f "$whl" ]; then
              continue
            fi

            echo "🔍 验证: $(basename "$whl")"
            size=$(stat -c%s "$whl" 2>/dev/null || stat -f%z "$whl" 2>/dev/null) # Compatible stat for Linux/macOS
            echo "文件大小: $size bytes"
          
            if [ "$size" -eq 0 ]; then
              echo "❌ 文件大小为 0，跳过并删除"
              rm "$whl"
              continue
            fi
          
            # ZIP 结构验证
            # 将当前 wheel 路径传递给 Python 脚本
            export CURRENT_WHL_PATH="$whl"
            if ! python3 -c "${CODE_TO_RUN}" ; then
              echo "❌ $(basename "$whl") ZIP 验证失败，删除"
              rm "$whl"
              continue
            fi
          
            # Twine 验证
            if python -m twine check "$whl"; then
              echo "✅ $(basename "$whl") 验证通过"
              VALID_WHEELS_EXIST=true
            else
              echo "❌ $(basename "$whl") Twine 验证失败，删除"
              rm "$whl"
            fi
            echo "---"
          done
          
          if [ "$VALID_WHEELS_EXIST" = false ]; then
            echo "❌ 没有有效的 wheel 文件可供上传"
            exit 1
          fi
          
          echo "=== 准备上传的文件 ==="
          ls -la dist/
        env:
          # 定义包含正确缩进的 Python 脚本
          CODE_TO_RUN: |
            import zipfile
            import sys
            import os

            # 从环境变量获取当前处理的 wheel 路径
            whl_path = os.environ.get('CURRENT_WHL_PATH')
            if not whl_path:
                print('Error: CURRENT_WHL_PATH not set.')
                sys.exit(1)
            
            try:
              with zipfile.ZipFile(whl_path, 'r') as zf:
                bad_files = zf.testzip()
                if bad_files:
                  print('❌ ZIP 损坏:', bad_files)
                  sys.exit(1)
                files = zf.namelist()
                has_metadata = any('METADATA' in f for f in files)
                has_wheel = any('WHEEL' in f for f in files)
                if not (has_metadata and has_wheel):
                  print('❌ 缺少必要的元数据文件')
                  sys.exit(1)
                print('✅ ZIP 结构正常')
            except zipfile.BadZipFile as e:
              print('❌ ZIP 文件损坏:', e)
              sys.exit(1)
            except Exception as e:
              print('❌ 验证失败:', e)
              sys.exit(1)

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          # Only upload files that remain in the dist folder after validation
          python -m twine upload --skip-existing dist/*.whl --verbose

  release:
    needs: [publish]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Download all wheels for release
        uses: actions/download-artifact@v4
        with:
          path: dist # Download artifacts directly into 'dist' for release assets
          pattern: wheels-*
          merge-multiple: true

      - name: Prepare release assets
        run: |
          # The wheels are already in 'dist', so just list them
          echo "=== 发布文件 ==="
          ls -la dist/*.whl

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.whl # Use the 'dist' folder for assets
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}