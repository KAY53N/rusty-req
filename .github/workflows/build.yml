name: Build and Publish Rust Python Extension

on:
  push:
    tags:
      - 'v*'   # 例如 v0.1.0、v1.2.3 等

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
    steps:
      - uses: actions/checkout@v4

      - name: Check package manager
        run: |
          if command -v yum; then
            echo "yum 可用"
            yum --help
          elif command -v dnf; then
            echo "dnf 可用"
            dnf --help
          else
            echo "无 yum 和 dnf"
            exit 1
          fi

      - name: Install system dependencies
        run: |
          dnf install -y openssl-devel pkgconfig

      - name: Install Rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          echo 'export PATH=$HOME/.cargo/bin:$PATH' >> ~/.bashrc

      - name: Set up Python & Build Wheel
        shell: bash
        run: |
          source $HOME/.cargo/env
          
          PYTHON_VERSION=${{ matrix.python-version }}
          PYTHON_TAG="cp${PYTHON_VERSION/./}-cp${PYTHON_VERSION/./}"
          
          PYTHON_DIR=""
          for dir in /opt/python/${PYTHON_TAG}*; do
            if [[ -d "$dir" ]]; then
              PYTHON_DIR="$dir"
              break
            fi
          done
          
          if [[ -z "$PYTHON_DIR" ]]; then
            echo "❌ 没找到解释器目录 /opt/python/${PYTHON_TAG}*"
            ls -1 /opt/python
            exit 1
          fi
          
          PYTHON_BIN="${PYTHON_DIR}/bin"
          echo "✅ 使用解释器路径: ${PYTHON_BIN}"
          
          ${PYTHON_BIN}/pip install --upgrade pip
          ${PYTHON_BIN}/pip install maturin==1.9.2
          
          ${PYTHON_BIN}/maturin build --release --manylinux 2_28 --interpreter ${PYTHON_BIN}/python
      - name: Upload Linux wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-py${{ matrix.python-version }}
          path: target/wheels/*.whl

  build-macos:
    runs-on: macos-latest
    continue-on-error: true
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Add macOS targets
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install maturin and delocate
        run: pip install maturin delocate

      - name: Build x86_64 wheel
        run: |
          mkdir -p target/wheels/x86_64
          maturin build --release --target x86_64-apple-darwin --interpreter python${{ matrix.python-version }}
          mv target/wheels/*.whl target/wheels/x86_64/

      - name: Build aarch64 wheel
        run: |
          mkdir -p target/wheels/aarch64
          maturin build --release --target aarch64-apple-darwin --interpreter python${{ matrix.python-version }}
          mv target/wheels/*.whl target/wheels/aarch64/

      - name: Create universal2 wheel
        run: |
          pip install delocate
          mkdir -p target/wheels/universal
          delocate-merge \
            -w target/wheels/universal \
            target/wheels/x86_64/*.whl \
            target/wheels/aarch64/*.whl
          mv target/wheels/universal/*.whl target/wheels/

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-py${{ matrix.python-version }}
          path: target/wheels/*.whl

  build-windows:
    runs-on: windows-latest
    env:
      ACTIONS_RUNNER_DEBUG: true
      ACTIONS_STEP_DEBUG: true
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Clean build dirs
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force target, dist, final_dist -ErrorAction Ignore

      - name: Install maturin
        run: |
          python -m pip install --upgrade pip
          python -m pip install maturin==1.9.2

      - name: Build wheel
        run: |
          python -m maturin build --release --interpreter python${{ matrix.python-version }}

      - name: Upload Windows wheels for debugging
        uses: actions/upload-artifact@v4
        with:
          name: debug-wheels
          path: target/wheels/*.whl
          overwrite: true

  publish:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true

      - name: Show downloaded artifacts
        run: |
          echo "=== dist 目录结构 ==="
          ls -R dist || true

      - name: Collect all wheels into final_dist
        shell: bash
        run: |
          mkdir -p final_dist
          find dist -type f -name "*.whl" -exec cp {} final_dist/ \;
          echo "=== final_dist 内容 ==="
          ls -lh final_dist

      - name: Check wheels with twine
        shell: bash
        run: |
          pip install --upgrade pip twine
          twine check final_dist/*.whl

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          packages-dir: final_dist
          verbose: true
