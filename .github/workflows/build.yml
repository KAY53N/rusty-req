name: Build and Publish Rust Python Extension

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.9, 3.10, 3.11, 3.12, 3.13]
        include:
          - os: macos-latest
            python-version: 3.9
          - os: macos-latest
            python-version: 3.10
          - os: macos-latest
            python-version: 3.11
          - os: macos-latest
            python-version: 3.12
          - os: macos-latest
            python-version: 3.13

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Set up additional Rust targets for macOS
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config openssl || true

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install openssl.light pkgconfiglite -y

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install cibuildwheel==2.16.2 maturin==1.9.2

      - name: Build wheels with cibuildwheel
        shell: bash
        run: |
          cibuildwheel --output-dir wheelhouse . 2>&1 | tee build.log
          BUILD_EXIT_CODE=${PIPESTATUS[0]}

          echo "=== Build completed with exit code: $BUILD_EXIT_CODE ==="
          echo "=== Build log contents ==="
          cat build.log

          if [ -d wheelhouse ] && [ "$(ls -1 wheelhouse/*.whl 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "✅ Wheels generated successfully"
            exit 0
          else
            echo "❌ No wheels generated or build failed"
            exit $BUILD_EXIT_CODE
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_SKIP: "*-musllinux_* pp*"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux_2_28"
          CIBW_ENVIRONMENT: "MACOSX_DEPLOYMENT_TARGET=10.12"
          CIBW_BUILD_COMMAND: "maturin build --release --interpreter python"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "python -m auditwheel repair -w {dest_dir} {wheel}"
          CIBW_BEFORE_BUILD: ""

      - name: Verify wheels
        run: |
          python -m pip install twine
          if [ -d wheelhouse ] && [ "$(ls -1 wheelhouse/*.whl 2>/dev/null | wc -l)" -gt 0 ]; then
            python -m twine check wheelhouse/*.whl
          else
            echo "No wheels to verify"
          fi

      - name: Upload wheels as artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  publish:
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true

      - name: Collect and validate wheels
        run: |
          echo "=== 收集到的 wheel 文件 ==="
          find dist -name "*.whl" -exec ls -la {} \;

          python -m pip install twine
          VALID_WHEELS_EXIST=false
          for whl in dist/*.whl; do
            if [ ! -f "$whl" ]; then continue; fi
            echo "🔍 验证: $(basename "$whl")"
            size=$(stat -c%s "$whl" 2>/dev/null || stat -f%z "$whl" 2>/dev/null)
            echo "文件大小: $size bytes"
            if [ "$size" -eq 0 ]; then
              echo "❌ 文件大小为 0，删除"; rm "$whl"; continue
            fi
            export CURRENT_WHL_PATH="$whl"
            if ! python3 -c "${CODE_TO_RUN}" ; then
              echo "❌ ZIP 验证失败，删除"; rm "$whl"; continue
            fi
            if python -m twine check "$whl"; then
              echo "✅ $(basename "$whl") 验证通过"
              VALID_WHEELS_EXIST=true
            else
              echo "❌ Twine 验证失败，删除"; rm "$whl"
            fi
            echo "---"
          done
          if [ "$VALID_WHEELS_EXIST" = false ]; then
            echo "❌ 没有有效的 wheel 文件"; exit 1
          fi
          echo "=== 准备上传的文件 ==="
          ls -la dist/
        env:
          CODE_TO_RUN: |
            import zipfile, sys, os
            whl_path = os.environ.get('CURRENT_WHL_PATH')
            if not whl_path: sys.exit(1)
            try:
                with zipfile.ZipFile(whl_path, 'r') as zf:
                    bad_files = zf.testzip()
                    if bad_files: sys.exit(1)
                    files = zf.namelist()
                    if not any('METADATA' in f for f in files) or not any('WHEEL' in f for f in files):
                        sys.exit(1)
            except Exception: sys.exit(1)

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload --skip-existing dist/*.whl --verbose

  release:
    needs: [publish]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Download all wheels for release
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true

      - name: Prepare release assets
        run: |
          echo "=== 发布文件 ==="
          ls -la dist/*.whl

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.whl
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
