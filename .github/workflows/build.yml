name: Build and Publish Rust Python Extension

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: "要发布的版本号 (例如 v0.1.0)"
        required: false
        default: ""

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          dnf install -y openssl-devel pkgconfig

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
          source "$HOME/.cargo/env"
          rustup target add x86_64-unknown-linux-gnu

      - name: Set up Python & Build Wheel
        run: |
          source "$HOME/.cargo/env"
          PYTHON_VERSION=${{ matrix.python-version }}
          PYTHON_TAG="cp${PYTHON_VERSION//./}-cp${PYTHON_VERSION//./}"
          PYTHON_DIR=""
          for dir in /opt/python/*; do
              base=$(basename "$dir")
              if [[ "$base" == "${PYTHON_TAG}t" ]]; then
                  PYTHON_DIR="$dir"
                  break
              elif [[ "$base" == "$PYTHON_TAG" ]]; then
                  PYTHON_DIR="$dir"
              fi
          done
          if [[ -z "$PYTHON_DIR" ]]; then
              echo "❌ 没找到解释器目录"; ls -1 /opt/python; exit 1
          fi
          PYTHON_BIN="${PYTHON_DIR}/bin"
          $PYTHON_BIN/pip install --upgrade pip maturin==1.9.2
          OUTPUT_DIR="/tmp/wheels/linux-py${PYTHON_VERSION}"
          mkdir -p "$OUTPUT_DIR"
          cargo clean
          $PYTHON_BIN/maturin build --release --manylinux 2_28 --interpreter $PYTHON_BIN/python --out "$OUTPUT_DIR"

      - name: Verify wheel integrity
        run: |
          # 找到正确的 Python 解释器
          PYTHON_VERSION=${{ matrix.python-version }}
          PYTHON_TAG="cp${PYTHON_VERSION//./}-cp${PYTHON_VERSION//./}"
          PYTHON_DIR=""
          for dir in /opt/python/*; do
              base=$(basename "$dir")
              if [[ "$base" == "${PYTHON_TAG}t" ]]; then
                  PYTHON_DIR="$dir"
                  break
              elif [[ "$base" == "$PYTHON_TAG" ]]; then
                  PYTHON_DIR="$dir"
              fi
          done
          PYTHON_BIN="${PYTHON_DIR}/bin"
          $PYTHON_BIN/pip install wheel
          for wheel in /tmp/wheels/linux-py${{ matrix.python-version }}/*.whl; do
            echo "检查: $wheel"
            $PYTHON_BIN/python -m wheel verify "$wheel"
          done

      - name: Upload Linux wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-py${{ matrix.python-version }}
          path: /tmp/wheels/linux-py${{ matrix.python-version }}/*.whl

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        target: ["x86_64-apple-darwin", "aarch64-apple-darwin"]
      max-parallel: 3
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install maturin
        run: pip install maturin==1.9.2
      
      - name: Build wheel
        run: |
          OUTPUT_DIR="dist/macos-${{ matrix.target }}-py${{ matrix.python-version }}"
          mkdir -p $OUTPUT_DIR
          cargo clean
          maturin build --release --target ${{ matrix.target }} --interpreter python --out $OUTPUT_DIR

      - name: Verify wheel integrity
        run: |
          pip install wheel
          # macOS - 修正缩进
          for wheel in dist/macos-${{ matrix.target }}-py${{ matrix.python-version }}/*.whl; do
            echo "检查: $wheel"
            python -m wheel verify "$wheel"
          done
      
      - name: Upload macOS wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}-py${{ matrix.python-version }}
          path: dist/macos-${{ matrix.target }}-py${{ matrix.python-version }}/*.whl

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install maturin
        run: pip install maturin==1.9.2
      
      - name: Build wheel
        shell: pwsh
        run: |
          $OUTPUT_DIR = "dist\windows-py${{ matrix.python-version }}"
          New-Item -ItemType Directory -Path $OUTPUT_DIR -Force
          cargo clean
          # 添加更多参数确保构建正确性
          maturin build --release --interpreter python --out $OUTPUT_DIR --strip

      - name: Verify wheel integrity
        shell: pwsh  # 添加这行
        run: |
          pip install wheel
          Get-ChildItem "dist\windows-py${{ matrix.python-version }}\*.whl" | ForEach-Object {
            Write-Host "检查: $($_.FullName)"
            python -m wheel verify $_.FullName
            if ($LASTEXITCODE -ne 0) {
              Write-Host "❌ $($_.FullName) 验证失败"
            }
          }
      
      - name: Upload Windows wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-py${{ matrix.python-version }}
          path: dist/windows-py${{ matrix.python-version }}/*.whl

  publish:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: success() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'release')
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: final_dist
          pattern: wheels-*
          merge-multiple: true

      - name: List and verify all wheels
        run: |
          echo "所有下载的文件："
          ls -la final_dist/
          echo "验证 wheel 文件完整性："
          pip install wheel
          for wheel in final_dist/*.whl; do
          echo "检查: $wheel"
          python -m wheel verify "$wheel" || echo "❌ $wheel 验证失败"
          # 显示文件信息
          file "$wheel"
          # 检查是否是有效的 ZIP 文件
          unzip -t "$wheel" || echo "❌ $wheel ZIP 验证失败"
          done

      - name: List and verify all wheels
        run: |
          echo "所有下载的文件："
          ls -la final_dist/
          echo "验证 wheel 文件完整性："
          pip install wheel
          for wheel in final_dist/*.whl; do
            echo "检查: $wheel"
            python -m wheel verify "$wheel" || echo "❌ $wheel 验证失败"
            # 显示文件信息
            file "$wheel"
            # 检查是否是有效的 ZIP 文件
            unzip -t "$wheel" || echo "❌ $wheel ZIP 验证失败"
          done

      - name: Install twine and check files  # 新增这个步骤
        run: |
          pip install twine
          echo "使用 twine 检查所有文件："
          twine check final_dist/*.whl

      - name: Upload to PyPI using twine
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload --skip-existing final_dist/*.whl --verbose
